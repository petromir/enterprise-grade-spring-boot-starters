package com.petromirdzhunev.spring.boot.conversion.tabular.excel;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.dhatim.fastexcel.Workbook;
import org.dhatim.fastexcel.Worksheet;
import org.dhatim.fastexcel.reader.ReadableWorkbook;
import org.dhatim.fastexcel.reader.Row;

import com.github.fge.lambdas.Throwing;
import com.petromirdzhunev.spring.boot.conversion.exception.DataConversionException;
import com.petromirdzhunev.spring.boot.conversion.tabular.TabularGroupingColumn;
import com.petromirdzhunev.spring.boot.conversion.tabular.TabularRow;

public class ExcelConverter {

	public Map<TabularGroupingColumn, List<TabularRow>> excelToMap(final byte[] content,
			final ExcelExtractionCoordinates extractionCoordinates) {
		try (InputStream is = new ByteArrayInputStream(content); ReadableWorkbook wb = new ReadableWorkbook(is)) {
			return wb.findSheet(extractionCoordinates.sheetName())
			         .map(Throwing.function(sheet ->
					         sheet.openStream()
					              .filter(row -> row.getRowNum() >= extractionCoordinates.startRow()
							              && row.getRowNum() <= extractionCoordinates.endRow())
					              .collect(Collectors.toMap(row -> tabularGroupingColumn(row, extractionCoordinates),
									              row -> rows(row, extractionCoordinates)))))
			         .orElseThrow(() -> new DataConversionException(
					         "Failed to extract content from Excel [sheet=%s]".formatted(
							         extractionCoordinates.sheetName())));
		} catch (IOException ioe) {
			throw new DataConversionException(
					"Failed to extract content from Excel [sheet=%s]".formatted(extractionCoordinates.sheetName()),
					ioe);
		}
	}

	// TODO: Add option to provide formatting
	public byte[] listToExcel(final List<List<String>> rows) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try (Workbook wb = new Workbook(baos, "Intrastat Processor", null)) {
			wb.properties().setTitle("Intrastat");
			Worksheet ws = wb.newWorksheet("Autogenerated Intrastat");
			for (int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
				final List<String> rowCells = rows.get(rowIndex);
				for (int columnIndex = 0; columnIndex < rowCells.size(); columnIndex++) {
					ws.value(rowIndex, columnIndex, rowCells.get(columnIndex));
				}
			}
		} catch (IOException e) {
			throw new DataConversionException("Failed to generate a list to Excel [sheet=%s]", e);
		}
		return baos.toByteArray();
	}

	private List<TabularRow> rows(final Row row, final ExcelExtractionCoordinates extractionCoordinates) {
		return List.of(new TabularRow(extractionCoordinates.excelColumns(), row::getCellText));
	}

	private TabularGroupingColumn tabularGroupingColumn(final Row row, final ExcelExtractionCoordinates extractionCoordinates) {
		return new TabularGroupingColumn(extractionCoordinates.groupByColumns(), row::getCellText);
	}
}
